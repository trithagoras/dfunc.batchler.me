// Generated from java-escape by ANTLR 4.11.1
// jshint ignore: start
import antlr4 from 'antlr4';


const serializedATN = [4,0,41,284,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,
4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,
12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,
2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,
27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,
7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,
41,2,42,7,42,1,0,1,0,1,0,1,1,1,1,1,1,1,2,1,2,1,3,1,3,1,3,1,4,1,4,1,4,1,4,
1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,
3,5,121,8,5,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,9,1,9,1,10,
1,10,1,10,1,11,1,11,1,11,1,12,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,
16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,
1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,29,1,
30,1,30,1,31,1,31,1,32,1,32,1,33,1,33,1,33,1,34,1,34,1,34,1,34,1,34,1,34,
1,34,1,34,1,34,3,34,199,8,34,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,36,1,36,
1,36,5,36,211,8,36,10,36,12,36,214,9,36,3,36,216,8,36,1,37,1,37,5,37,220,
8,37,10,37,12,37,223,9,37,1,38,1,38,1,38,1,38,5,38,229,8,38,10,38,12,38,
232,9,38,1,38,1,38,1,38,1,38,1,38,5,38,239,8,38,10,38,12,38,242,9,38,1,38,
3,38,245,8,38,1,39,1,39,5,39,249,8,39,10,39,12,39,252,9,39,1,39,1,39,1,39,
1,39,5,39,258,8,39,10,39,12,39,261,9,39,1,39,1,39,3,39,265,8,39,1,39,1,39,
1,40,1,40,1,40,1,40,1,41,1,41,5,41,275,8,41,10,41,12,41,278,9,41,1,41,3,
41,281,8,41,1,42,1,42,1,259,0,43,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,
19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,
43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,
67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,0,85,0,1,0,10,3,0,65,
90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,1,0,34,34,4,0,10,10,13,13,34,
34,92,92,2,0,10,10,13,13,1,0,39,39,4,0,10,10,13,13,39,39,92,92,3,0,9,10,
12,13,32,32,1,0,49,57,1,0,48,57,298,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,
0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,
0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,
1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,
0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,
0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,
63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,
0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,1,87,1,0,0,0,3,90,
1,0,0,0,5,93,1,0,0,0,7,95,1,0,0,0,9,98,1,0,0,0,11,120,1,0,0,0,13,122,1,0,
0,0,15,127,1,0,0,0,17,130,1,0,0,0,19,134,1,0,0,0,21,136,1,0,0,0,23,139,1,
0,0,0,25,142,1,0,0,0,27,145,1,0,0,0,29,147,1,0,0,0,31,149,1,0,0,0,33,151,
1,0,0,0,35,153,1,0,0,0,37,155,1,0,0,0,39,157,1,0,0,0,41,159,1,0,0,0,43,161,
1,0,0,0,45,163,1,0,0,0,47,165,1,0,0,0,49,167,1,0,0,0,51,169,1,0,0,0,53,171,
1,0,0,0,55,173,1,0,0,0,57,175,1,0,0,0,59,177,1,0,0,0,61,180,1,0,0,0,63,182,
1,0,0,0,65,184,1,0,0,0,67,186,1,0,0,0,69,198,1,0,0,0,71,200,1,0,0,0,73,207,
1,0,0,0,75,217,1,0,0,0,77,244,1,0,0,0,79,264,1,0,0,0,81,268,1,0,0,0,83,280,
1,0,0,0,85,282,1,0,0,0,87,88,5,45,0,0,88,89,5,62,0,0,89,2,1,0,0,0,90,91,
5,61,0,0,91,92,5,62,0,0,92,4,1,0,0,0,93,94,5,124,0,0,94,6,1,0,0,0,95,96,
5,105,0,0,96,97,5,102,0,0,97,8,1,0,0,0,98,99,5,116,0,0,99,100,5,104,0,0,
100,101,5,101,0,0,101,102,5,110,0,0,102,10,1,0,0,0,103,104,5,98,0,0,104,
105,5,111,0,0,105,106,5,111,0,0,106,121,5,108,0,0,107,108,5,105,0,0,108,
109,5,110,0,0,109,121,5,116,0,0,110,111,5,114,0,0,111,112,5,101,0,0,112,
113,5,97,0,0,113,121,5,108,0,0,114,115,5,115,0,0,115,116,5,116,0,0,116,117,
5,114,0,0,117,118,5,105,0,0,118,119,5,110,0,0,119,121,5,103,0,0,120,103,
1,0,0,0,120,107,1,0,0,0,120,110,1,0,0,0,120,114,1,0,0,0,121,12,1,0,0,0,122,
123,5,101,0,0,123,124,5,108,0,0,124,125,5,115,0,0,125,126,5,101,0,0,126,
14,1,0,0,0,127,128,5,111,0,0,128,129,5,114,0,0,129,16,1,0,0,0,130,131,5,
97,0,0,131,132,5,110,0,0,132,133,5,100,0,0,133,18,1,0,0,0,134,135,5,61,0,
0,135,20,1,0,0,0,136,137,5,33,0,0,137,138,5,61,0,0,138,22,1,0,0,0,139,140,
5,62,0,0,140,141,5,61,0,0,141,24,1,0,0,0,142,143,5,60,0,0,143,144,5,61,0,
0,144,26,1,0,0,0,145,146,5,94,0,0,146,28,1,0,0,0,147,148,5,33,0,0,148,30,
1,0,0,0,149,150,5,62,0,0,150,32,1,0,0,0,151,152,5,60,0,0,152,34,1,0,0,0,
153,154,5,43,0,0,154,36,1,0,0,0,155,156,5,45,0,0,156,38,1,0,0,0,157,158,
5,42,0,0,158,40,1,0,0,0,159,160,5,47,0,0,160,42,1,0,0,0,161,162,5,37,0,0,
162,44,1,0,0,0,163,164,5,123,0,0,164,46,1,0,0,0,165,166,5,125,0,0,166,48,
1,0,0,0,167,168,5,91,0,0,168,50,1,0,0,0,169,170,5,93,0,0,170,52,1,0,0,0,
171,172,5,40,0,0,172,54,1,0,0,0,173,174,5,41,0,0,174,56,1,0,0,0,175,176,
5,59,0,0,176,58,1,0,0,0,177,178,5,58,0,0,178,179,5,61,0,0,179,60,1,0,0,0,
180,181,5,44,0,0,181,62,1,0,0,0,182,183,5,63,0,0,183,64,1,0,0,0,184,185,
5,58,0,0,185,66,1,0,0,0,186,187,5,43,0,0,187,188,5,43,0,0,188,68,1,0,0,0,
189,190,5,116,0,0,190,191,5,114,0,0,191,192,5,117,0,0,192,199,5,101,0,0,
193,194,5,102,0,0,194,195,5,97,0,0,195,196,5,108,0,0,196,197,5,115,0,0,197,
199,5,101,0,0,198,189,1,0,0,0,198,193,1,0,0,0,199,70,1,0,0,0,200,201,5,105,
0,0,201,202,5,109,0,0,202,203,5,112,0,0,203,204,5,111,0,0,204,205,5,114,
0,0,205,206,5,116,0,0,206,72,1,0,0,0,207,215,3,83,41,0,208,212,5,46,0,0,
209,211,3,85,42,0,210,209,1,0,0,0,211,214,1,0,0,0,212,210,1,0,0,0,212,213,
1,0,0,0,213,216,1,0,0,0,214,212,1,0,0,0,215,208,1,0,0,0,215,216,1,0,0,0,
216,74,1,0,0,0,217,221,7,0,0,0,218,220,7,1,0,0,219,218,1,0,0,0,220,223,1,
0,0,0,221,219,1,0,0,0,221,222,1,0,0,0,222,76,1,0,0,0,223,221,1,0,0,0,224,
230,7,2,0,0,225,229,8,3,0,0,226,227,5,92,0,0,227,229,8,4,0,0,228,225,1,0,
0,0,228,226,1,0,0,0,229,232,1,0,0,0,230,228,1,0,0,0,230,231,1,0,0,0,231,
233,1,0,0,0,232,230,1,0,0,0,233,245,7,2,0,0,234,240,7,5,0,0,235,239,8,6,
0,0,236,237,5,92,0,0,237,239,8,4,0,0,238,235,1,0,0,0,238,236,1,0,0,0,239,
242,1,0,0,0,240,238,1,0,0,0,240,241,1,0,0,0,241,243,1,0,0,0,242,240,1,0,
0,0,243,245,7,5,0,0,244,224,1,0,0,0,244,234,1,0,0,0,245,78,1,0,0,0,246,250,
5,35,0,0,247,249,8,4,0,0,248,247,1,0,0,0,249,252,1,0,0,0,250,248,1,0,0,0,
250,251,1,0,0,0,251,265,1,0,0,0,252,250,1,0,0,0,253,254,5,123,0,0,254,255,
5,35,0,0,255,259,1,0,0,0,256,258,9,0,0,0,257,256,1,0,0,0,258,261,1,0,0,0,
259,260,1,0,0,0,259,257,1,0,0,0,260,262,1,0,0,0,261,259,1,0,0,0,262,263,
5,35,0,0,263,265,5,125,0,0,264,246,1,0,0,0,264,253,1,0,0,0,265,266,1,0,0,
0,266,267,6,39,0,0,267,80,1,0,0,0,268,269,7,7,0,0,269,270,1,0,0,0,270,271,
6,40,0,0,271,82,1,0,0,0,272,276,7,8,0,0,273,275,3,85,42,0,274,273,1,0,0,
0,275,278,1,0,0,0,276,274,1,0,0,0,276,277,1,0,0,0,277,281,1,0,0,0,278,276,
1,0,0,0,279,281,5,48,0,0,280,272,1,0,0,0,280,279,1,0,0,0,281,84,1,0,0,0,
282,283,7,9,0,0,283,86,1,0,0,0,16,0,120,198,212,215,221,228,230,238,240,
244,250,259,264,276,280,1,6,0,0];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class dfuncLexer extends antlr4.Lexer {

    static grammarFileName = "dfunc.g4";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	static modeNames = [ "DEFAULT_MODE" ];
	static literalNames = [ null, "'->'", "'=>'", "'|'", "'if'", "'then'", 
                         null, "'else'", "'or'", "'and'", "'='", "'!='", 
                         "'>='", "'<='", "'^'", "'!'", "'>'", "'<'", "'+'", 
                         "'-'", "'*'", "'/'", "'%'", "'{'", "'}'", "'['", 
                         "']'", "'('", "')'", "';'", "':='", "','", "'?'", 
                         "':'", "'++'", null, "'import'" ];
	static symbolicNames = [ null, null, null, null, null, null, "PrimitiveType", 
                          "Else", "Or", "And", "Equals", "NEquals", "GTEquals", 
                          "LTEquals", "Pow", "Excl", "GT", "LT", "Add", 
                          "Subtract", "Multiply", "Divide", "Modulus", "OBrace", 
                          "CBrace", "OBracket", "CBracket", "OParen", "CParen", 
                          "SColon", "Assign", "Comma", "QMark", "Colon", 
                          "Concat", "Bool", "KW_IMPORT", "Number", "Identifier", 
                          "String", "Comment", "Space" ];
	static ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "PrimitiveType", 
                      "Else", "Or", "And", "Equals", "NEquals", "GTEquals", 
                      "LTEquals", "Pow", "Excl", "GT", "LT", "Add", "Subtract", 
                      "Multiply", "Divide", "Modulus", "OBrace", "CBrace", 
                      "OBracket", "CBracket", "OParen", "CParen", "SColon", 
                      "Assign", "Comma", "QMark", "Colon", "Concat", "Bool", 
                      "KW_IMPORT", "Number", "Identifier", "String", "Comment", 
                      "Space", "Int", "Digit" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.PredictionContextCache());
    }

    get atn() {
        return atn;
    }
}

dfuncLexer.EOF = antlr4.Token.EOF;
dfuncLexer.T__0 = 1;
dfuncLexer.T__1 = 2;
dfuncLexer.T__2 = 3;
dfuncLexer.T__3 = 4;
dfuncLexer.T__4 = 5;
dfuncLexer.PrimitiveType = 6;
dfuncLexer.Else = 7;
dfuncLexer.Or = 8;
dfuncLexer.And = 9;
dfuncLexer.Equals = 10;
dfuncLexer.NEquals = 11;
dfuncLexer.GTEquals = 12;
dfuncLexer.LTEquals = 13;
dfuncLexer.Pow = 14;
dfuncLexer.Excl = 15;
dfuncLexer.GT = 16;
dfuncLexer.LT = 17;
dfuncLexer.Add = 18;
dfuncLexer.Subtract = 19;
dfuncLexer.Multiply = 20;
dfuncLexer.Divide = 21;
dfuncLexer.Modulus = 22;
dfuncLexer.OBrace = 23;
dfuncLexer.CBrace = 24;
dfuncLexer.OBracket = 25;
dfuncLexer.CBracket = 26;
dfuncLexer.OParen = 27;
dfuncLexer.CParen = 28;
dfuncLexer.SColon = 29;
dfuncLexer.Assign = 30;
dfuncLexer.Comma = 31;
dfuncLexer.QMark = 32;
dfuncLexer.Colon = 33;
dfuncLexer.Concat = 34;
dfuncLexer.Bool = 35;
dfuncLexer.KW_IMPORT = 36;
dfuncLexer.Number = 37;
dfuncLexer.Identifier = 38;
dfuncLexer.String = 39;
dfuncLexer.Comment = 40;
dfuncLexer.Space = 41;



